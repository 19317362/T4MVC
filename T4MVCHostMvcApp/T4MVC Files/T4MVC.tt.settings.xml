<?xml version="1.0" encoding="utf-8"?>
<MvcSettings>
  <!--The namespace used by some of T4MVC's generated code-->
  <T4MVCNamespace>T4MVC</T4MVCNamespace>
  <!--The prefix used for things like MVC.Dinners.Name and MVC.Dinners.Delete(Model.DinnerID)-->
  <HelpersPrefix>MVC</HelpersPrefix>
  <!--Namespaces to be referenced by the generated code-->
  <ReferencedNamespaces>
    <!--<Namespace></Namespace>-->
  </ReferencedNamespaces>
  <!--The folder under the project that contains the areas-->
  <AreasFolder>Areas</AreasFolder>
  <!--You can list folders containing portable areas here-->
  <PortableAreas>
    <!--<Area></Area>-->
  </PortableAreas>
  <!--Choose whether you want to include an 'Areas' token when referring to areas.
e.g. Assume the Area is called Blog and the Controller is Post:
- When false use MVC.Blog.Post.etc...
- When true use MVC.Areas.Blog.Post.etc...-->
  <IncludeAreasToken>False</IncludeAreasToken>
  <!--The folder under the project that contains the controllers-->
  <ControllersFolder>Controllers</ControllersFolder>
  <!--The folder under the project that contains the views-->
  <ViewsRootFolder>Views</ViewsRootFolder>
  <!--Views in DisplayTemplates and EditorTemplates folders shouldn't be fully qualifed
as it breaks the templated helper code-->
  <NonQualifiedViewFolders>
    <ViewFolder>DisplayTemplates</ViewFolder>
    <ViewFolder>EditorTemplates</ViewFolder>
  </NonQualifiedViewFolders>
  <!--If true, the T4MVC action result interface will be generated
If false, the namespace of the interface must be referenced in the 'ReferencedNamespaces' setting-->
  <GenerateActionResultInterface>True</GenerateActionResultInterface>
  
    <!--The true the parameter name class will be generated as constants (allowing use in attributes).  This is the suggested way to do this.  
  However, if you used T4MVC Params before and referenced them outside the controller, your references will need to change from MVC.User.MyActionParams 
  to MVC.UserController.MyActionParams.  -->
  <GenerateParamsAsConstantsForActionMethods>True</GenerateParamsAsConstantsForActionMethods>

  <!--The true the parameter name class will be generated as classes inside T4MVC - they cannote be used in attributes. -->
  <GenerateParamsForActionMethods>True</GenerateParamsForActionMethods>
  
  <!--Original contribution for the bundle namespace named everything starting with a lower case letter.  This does not align with the naming convention used everywhere else
  in T4MVC - so this was changed.  However, to avoid breaking code of existing users - you can enable the lower case option  -->
  <GenerateBundleNamespaceAsLowerCase>False</GenerateBundleNamespaceAsLowerCase>

  
  <!--If true, use lower case tokens in routes for the area, controller and action names-->
  <UseLowercaseRoutes>False</UseLowercaseRoutes>
  <!--The namespace that the links are generated in (e.g. "Links", as in Links.Content.nerd_jpg)-->
  <LinksNamespace>Links</LinksNamespace>
  <!--If true, links to static files include a query string containing the file's last change time.
This way, when the static file changes, the link changes and guarantees that the client will re-request the resource.
e.g. when true, the link looks like: "/Content/nerd.jpg?2009-09-04T12:25:48"
See http://mvccontrib.codeplex.com/workitem/7163 for potential issues with this feature-->
  <AddTimestampToStaticLinks>False</AddTimestampToStaticLinks>
  <!--Folders containing static files for which links are generated (e.g. Links.Scripts.Map_js)-->
  <StaticFilesFolders>
    <FileFolder>Scripts</FileFolder>
    <FileFolder>Content</FileFolder>
    <FileFolder>ContentStatic\TextFiles</FileFolder>
  </StaticFilesFolders>
  <!--Static files to exclude from the generated links-->
  <ExcludedStaticFileExtensions>
    <Extension>.cs</Extension>
  </ExcludedStaticFileExtensions>
  <!--When creating links with T4MVC, it can force them to HTTPS if the action method you are linking to requires Http.-->
  <AttributeIndicatingHttps>System.Web.Mvc.RequireHttpsAttribute</AttributeIndicatingHttps>
  <GenerateSecureLinksInDebugMode>False</GenerateSecureLinksInDebugMode>
  <!--The suffix added to action method names for the property containing the parameters, for example ImportParams
for the Import action method.-->
  <ParamsPropertySuffix>Params</ParamsPropertySuffix>
  <!--create explicit HtmlHelpers for rendering partials-->
  <ExplicitHtmlHelpersForPartials>False</ExplicitHtmlHelpersForPartials>
  <ExplicitHtmlHelpersForPartialsFormat>Render{0}</ExplicitHtmlHelpersForPartialsFormat>
  <!--If true,the template output will be split into multiple files.-->
  <SplitIntoMultipleFiles>True</SplitIntoMultipleFiles>
</MvcSettings>